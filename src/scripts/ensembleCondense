#!/usr/bin/env perl

sub printHelp
{
   print <<ENDHELP;
#############################################################################
# PROGRAM: EnsembleCondense
# PURPOSE: This program will run an ensemble of precondensation and Lammps 
#          condensation. It will create several packmol files(precondensations) 
#          and derive the Lammps data file for each of those then run a Lammps 
#          condesation.
#
# USAGE:   ensembleCondense [-i \$inputFile] [-n \$numSimulations]
#                           [-c \$numComposition] [-r \$numReactions] | [-help]
#
# The -i option can be used to specify the name of the input file (\$inputFile).
#   If this option is not given then a default value of "ensemble.in" will be
#   used.
# The -n \$numSimulations option can be used to define the size of the ensemble
#   by giving the number of simultaneous simulations (\$numSimulations). If
#   this option is not provided, then a default value of 20 will be used.
#############################################################################
ENDHELP
   exit(0);
}

###############################################
# Begin program execution #####################
###############################################

# Use necessary modules.
use strict;
use warnings;
use POSIX qw(ceil floor);
use Env;
use lib "$OLCAO_BIN/perl5";
use StructureControl;
use ElementData;
use BondData;
use AngleData;
use File::Copy;


# Declare Global Variables.
my $inputFile; # Base input file for generating ensembles.
my $numSimulations; # Number of the simulations to be run at a time.
my $numCompositions; # Number of atomic bond types.
my $numReactions; # Number of different types of reactions.
my $numMoleculeTypes;
my $numReactionTypes;
my @numMolecules;
my @moleculeName;
my @bindingType;
my $maxCellSize;
my $minCellSize;
my @rxnMolName;
my @rxnBinding;
my @rxnProbability;
my $C = 0;


# Initialize the environment.
&initEnv;

# Read the command line parameters.
&parseCommandLine;

# Read the main input file.
&parseInputFile;

## Error check the input for consistency.
#&errorCheckInput;

## Compute implicit information not explicitly given in the input file.
#&computeImplicitInput;

# Generate initial ensemble.
&initEnsemble;

# Test parallelization.
&runParallelCondense;

# Start evolutionary algorithm.
&evolveEnsemble;

# Process the final output.
&processResults;

###############################################
# End program execution #######################
###############################################


sub initEnv
{
   # Define default values for command line parameters.
   $inputFile = "ensemble.in";
   $numSimulations = 3;
   $numCompositions = 0;
   $numReactions = 0;
}


# Loop through the command line parameters checking for each option.
sub parseCommandLine
{
   # Define local variables.
   my $number; # A simple counter for tracking which command line parameter we
               #   are currently on during the search through @ARGV.
   my $argument;


   # Read the command line parameters.
   $number = 0;
   while ($number < scalar(@ARGV))
   {
      if ($ARGV[$number] eq "-help")
         {&printHelp;}
      elsif ($ARGV[$number] eq "-i")
         {$inputFile = $ARGV[++$number];}
      elsif ($ARGV[$number] eq "-n")
         {$numSimulations = $ARGV[++$number];}
      else
      {
         print STDOUT "UNKNOWN COMMAND LINE PARAMETER $ARGV[$number].";
         print STDOUT " ABORTING.\n";
         exit;
      }
      $number++;
   }

   # Record the command line used to run this job.
   open (COMMANDLINE,">>command");
   print COMMANDLINE "ensembleCondense ";
   foreach $argument (0..$#ARGV)
      {print COMMANDLINE "$ARGV[$argument] ";}
   print COMMANDLINE "\n";
   close (COMMANDLINE);
}

sub parseInputFile
{

   # Define local variables.
   my $mol;
   my $rxn;
   my $line;
   my @values;
   my $sim;

   $C = $minCellSize;

   # Open the input file.
   open (INFILE,"<$inputFile")
         || die "Cannot open $inputFile for reading. \n";


   #Read the input file.
   while ($line = <INFILE>)

   {
      @values = StructureControl::prepLine("",$line,'\s+');

      # Look for "composition", "cell_size", and "reactions" key words.
      if (lc($values[0]) eq "composition")
      {
         $numMoleculeTypes = $values[1];

         foreach $mol (1..$numMoleculeTypes)
         {
            @values = StructureControl::prepLine(\*INFILE,"",'\s+');
            $moleculeName[$mol] = lc($values[0]);
            $bindingType[$mol] = lc($values[1]);
            $numMolecules[$mol] = $values[2];
         }
      }
      elsif (lc($values[0]) eq "cell_size")
      {
         $minCellSize = $values[1];
         $maxCellSize = $values[2];
      }
      elsif (lc($values[0]) eq "reactions")
      {
         # Get the number of different types of reactions.
         $numReactionTypes = $values[1];

         # Read the descriptor for each reaction that includes the name of each
         #   of the participating molecules and the type of binding that each
         #   molecule makes available for that reaction to occur.
         foreach $rxn (1..$numReactionTypes)
         {
            @values = StructureControl::prepLine(\*INFILE,"",'\s+');
            $rxnMolName[1][$rxn] = lc($values[0]);
            $rxnBinding[1][$rxn] = lc($values[1]);
            $rxnMolName[2][$rxn] = lc($values[2]);
            $rxnBinding[2][$rxn] = lc($values[3]);
            $rxnProbability[$rxn] = $values[4];
         }
      }
   }
}
#composition 3
#B10C2H12 B-1 6
#CH4 C-1 2
#CH3CH3 C-1 1
#
#cell_size $C
#
#reactions 3
#B10C2H12 B-1 B10C2H12 B-1 0.85
#B10C2H12 B-1 CH4 C-1 0.85
#B10C2H12 B-1 CH3CH3 C-1 0.75

sub initEnsemble
{
   # Define local variables.
   my $sim;
   my $C = $minCellSize;

   foreach $sim (1..$numSimulations)
   {
      mkdir "$sim";
      chdir "$sim";
      open (INP,">condense.in") || die "Cannot open condense.in for writing.\n";
      print INP <<ENDINP;
composition 1
CH4 C-1 2

cell_size $C

reactions 1
CH4 C-1 CH4 C-1 0.85
ENDINP
     chdir("..");
     $C += ($maxCellSize - $minCellSize)/($numSimulations-1);
   }
}

sub runParallelCondense
{
   # Define local variables.
   my $sim;

   foreach $sim (1..$numSimulations)
   {
      chdir ("$sim");
      #system("srun -n1 condense &");
      chdir ("..");
   }
   #wait();
   foreach $sim (1..$numSimulations)
   {
      chdir ("$sim");
   #   system("srun -n1 runLammps &");
      chdir ("..");
   }
   #wait();
}

sub evolveEnsemble
{
}

sub processResults
{
}

