#!/usr/bin/env perl

sub printHelp
{
   print <<ENDHELP;
#############################################################################
# PROGRAM: EnsembleCondense
# PURPOSE: This program will run an ensemble of precondensation and Lammps 
#          condensation. It will create several packmol files(precondensations) 
#          by calling another script called condense and derive the Lammps data 
#          file for each of those then run a Lammps condesation.
#
# USAGE:   ensembleCondense [-i \$inputFile] [-n \$numSimulations]
#                           [-c \$numComposition] [-r \$numReactions] | [-help]
#
#          -i option can be used to specify the name of the input file (\$inputFile).
#          If this option is not given then a default value of "ensemble.in" will be
#          used.
#          -n \$numSimulations option can be used to define the size of the ensemble
#          by giving the number of simultaneous simulations (\$numSimulations). If
#          this option is not provided, then a default value of 20 will be used.
#############################################################################
ENDHELP
   exit(0);
}

###############################################
# Begin program execution #####################
###############################################

# Use necessary modules.
use strict;
use warnings;
use v5.16.3;
use LWP::Simple;
use Parallel::ForkManager;
use POSIX qw(ceil floor);
use Env;
use lib "$OLCAO_BIN/perl5";
use StructureControl;
use ElementData;
use BondData;
use AngleData;
use File::Copy;


# Declare Global Variables.
my $inputFile; # Base input file for generating ensembles.
my $numSimulations; # Number of the simulations to be run at a time.
my $numCompositions; # Number of atomic bond types.
my $numReactions; # Number of different types of reactions.
my $numMoleculeTypes;
my $numReactionTypes;
my @numMolecules;
my @moleculeName;
my @bindingType;
my $maxCellSize;
my $minCellSize;
my @rxnMolName;
my @rxnBinding;
my @rxnMinProbability;
my @rxnMaxProbability;
my $pm;
my $C = 0;
my $probabilityB;
my $mol=0;
my @Car;
my @Bor;
my @Hyd;
my $countH=0;
my $countB=0;
my $countC=0;
my %elements;
my $elements_keys;
my @arr_sim;
my $percentage;
my $sim;
my $numAtoms;
my $stoich_values;
my $target_element_percentage;
my $target_element;
my @hydrogen_arr;
my $h_diff;
my @sorted_hydrogen_arr;
my $killing_rate;
my $number_ofmodels_tokill;
my $first;
my @models_to_kill;
my @content_of_condense;
my $probability;
my $wanted_density;
 



# Initialize the environment.
&initEnv;

# Read the command line parameters.
&parseCommandLine;

# Read the main input file.
&parseInputFile;

## Error check the input for consistency.
#&errorCheckInput;

## Compute implicit information not explicitly given in the input file.
#&computeImplicitInput;

# Generate initial ensemble.
&initEnsemble;

# Test parallelization.
&runParallelCondense;

# Get Steoichiometry
#&stoichiometry;

# Start evolutionary algorithm.
&evolveEnsemble;

# Process the final output.
&processResults;

###############################################
# End program execution #######################
###############################################

# Initializing the environment and setting default values. ##################################################
sub initEnv
{
   # Define default values for command line parameters.
   $inputFile = "ensemble.in";
   $numSimulations = 2;
   $numCompositions = 0;
   $numReactions = 0;
}


# Loop through the command line parameters checking for each option.##########################################
sub parseCommandLine
{
   # Define local variables.
   my $number; # A simple counter for tracking which command line parameter we
               #   are currently on during the search through @ARGV.
   my $argument;


   # Read the command line parameters.
   $number = 0;
   while ($number < scalar(@ARGV))
   {
      if ($ARGV[$number] eq "-help")
      {
         &printHelp;
      }
      elsif ($ARGV[$number] eq "-i")
      {
         $inputFile = $ARGV[++$number];
      }
      elsif ($ARGV[$number] eq "-n")
      {
         $numSimulations = $ARGV[++$number];
      }
      else
      {
         print STDOUT "UNKNOWN COMMAND LINE PARAMETER $ARGV[$number].";
         print STDOUT " ABORTING.\n";
         exit;
      }
      $number++;
   }

   # Record the command line used to run this job.
   open (COMMANDLINE,">>command");
   print COMMANDLINE "ensembleCondense ";
   foreach $argument (0..$#ARGV)
   {
      print COMMANDLINE "$ARGV[$argument] ";
   }
   print COMMANDLINE "\n";
   close (COMMANDLINE);
}


# Read the input file "ensemble.in" for the system specifications provided by the user.#########################
sub parseInputFile
{

   # Define local variables.
   my $mol;
   my $rxn;
   my $line;
   my @values;
   my $sim;
   my $rxnMinProbability;
   my $rxnMaxProbability;

   $C = $minCellSize;

   # Open the input file.
   open (INFILE,"<$inputFile")
         || die "Cannot open $inputFile for reading. \n";


   #Read the input file.
   while ($line = <INFILE>)
   {
      @values = StructureControl::prepLine("",$line,'\s+');

      # Look for "composition", "cell_size", and "reactions" key words.
      if (lc($values[0]) eq "num_models")

      {
        $numSimulations = $values[1];
      }
      elsif (lc($values[0]) eq "target_element")
      {
        $target_element = $values[1];
      }
      elsif (lc($values[0]) eq "target_element_percentage")
      {
         $target_element_percentage = $values[1];
      } 
      elsif (lc($values[0]) eq "density")
      {
	 $wanted_density= $values[1];
      }
      elsif (lc($values[0]) eq "killing_rate")
      {
         $killing_rate = $values[1];
      }
      elsif (lc($values[0]) eq "composition")
      {  
         $numMoleculeTypes = $values[1];

         foreach $mol (1..$numMoleculeTypes)
         {
            @values = StructureControl::prepLine(\*INFILE,"",'\s+');
            $moleculeName[$mol] = lc($values[0]);
            $bindingType[$mol] = lc($values[1]);
            $numMolecules[$mol] = $values[2];
         }
      }
      elsif (lc($values[0]) eq "cell_size")
      {
         $minCellSize = $values[1];
         $maxCellSize = $values[2];
      }
      elsif (lc($values[0]) eq "reactions")
      {
         # Get the number of different types of reactions.
         $numReactionTypes = $values[1];

         # Read the descriptor for each reaction that includes the name of each
         #   of the participating molecules and the type of binding that each
         #   molecule makes available for that reaction to occur.
         foreach $rxn (1..$numReactionTypes)
         {
            @values = StructureControl::prepLine(\*INFILE,"",'\s+');
            $rxnMolName[1][$rxn] = lc($values[0]);
            $rxnBinding[1][$rxn] = lc($values[1]);
            $rxnMolName[2][$rxn] = lc($values[2]);
            $rxnBinding[2][$rxn] = lc($values[3]);
            $rxnMinProbability[$rxn] = $values[4];
            $rxnMaxProbability[$rxn] = $values[5];
            print STDOUT "@values\n";
         }
      }
   }
}
#composition 3
#B10C2H12 B-1 6
#CH4 C-1 2
#CH3CH3 C-1 1
#
#cell_size $C
#
#reactions 3
#B10C2H12 B-1 B10C2H12 B-1 0.85
#B10C2H12 B-1 CH4 C-1 0.85
#B10C2H12 B-1 CH3CH3 C-1 0.75

# Create the necessary files for each ensemble member.############################################################################## 
sub initEnsemble
{
   # Define local variables.


   # my $mol;
   my $sim;

   my $C = $minCellSize;
   $probability = $rxnMinProbability[1];
    
   my $pm = Parallel::ForkManager->new($numSimulations);

   foreach $sim (1..$numSimulations)
   {
      $pm->start and next;
      $C = $minCellSize + ($maxCellSize - $minCellSize)/($numSimulations-1)*($sim-1);
      $probability = $rxnMinProbability[1] + ($rxnMaxProbability[1] - $rxnMinProbability[1])/($numSimulations-1)*($sim-1);
      mkdir "$sim";
      chdir "$sim";
      open (INP,">condense.in") || die "Cannot open condense.in for writing.\n";

      print INP "composition $numMoleculeTypes\n";
      foreach $mol (1..$numMoleculeTypes)
      {
         print INP "$moleculeName[$mol] family1 $numMolecules[$mol]\n";
      }
      print INP "\ncell_size $C\n\n";
      print INP "reactions $numReactionTypes\n";
      foreach $mol (1..$numMoleculeTypes)
      {
         print INP "$moleculeName[$mol] $bindingType[$mol] $moleculeName[$mol] $bindingType[$mol] $probability\n";
      }


      chdir("..");
      $pm->finish;

   
    }
    $pm->wait_all_children;

}

# Running and evaluating each ensemble member.####################################################################################
sub runParallelCondense
{
   # Declare local variables.
   my $out;
   my $inputFile_olcao="olcao.skl";
   my $line;
   my $atom;
   my $numAtoms;
   my @values;
   my $timestep;
   my $x=0;
   my $i;
   my $highbound;
   my $lowbound;
   my @SortedDensityDiff;
   my %DensityAndTimesteps;
   my @DensityDiff;
   my $vol;
   my $boxbound;
   my $chosen_timestep;      #the timestep we chose to get the closest volume.
   my $actual_cell_vol;   #cell volume read from the lammps dump file (dump.coarse)
   my $line_OLCTEMP;
   my $density_diff;      #The difference between the wanted density and the density calculated at each timestep.
   my $actual_density;    #The density of the model calculated at each time step 
 
   
   until ($x==1)
   {
     #push (@models_to_kill, 1);
     # until (scalar(@models_to_kill)=0)
     #{
     #shift @models_to_kill; 
     foreach $sim (1..$numSimulations)
     {
        chdir ("$sim");
        print "\n\n\n\n\n The following section is the output for Model number $sim\n";
        system("condense");
        chdir ("lammps");
        $out = `srun -N 1 -c 1 lmp < lammps.in`;
      
        #open the lammps dump file to read the right cell size and corresponding timestep.
        open (DMP, "<dump.coarse") 
		|| die "cannot open dump.coarse for reading. \n";

        #Moving the cursor a 1000 bytes down to avoid timestep 0. Timestep 0 is not a valid input for the dump2skl script.
        seek (DMP, 1000, 0);

        #looking form the keayword "TIMESTEP" inside the dump.coarse file.
        while ($line = <DMP>)
        {  
           if ($line =~ "TIMESTEP")
           {
              $timestep = <DMP>;
              print "timestep is $timestep\n";
              <DMP>;
              <DMP>;
              <DMP>;
              $boxbound = <DMP>;
              
              @values = StructureControl::prepLine("",$boxbound,'\s+');
              
              $lowbound = $values[0];
              $highbound = $values[1];
              $actual_cell_vol = abs ($highbound - $lowbound)**3;

              system("dump2skl -d dump.coarse -a lammps.dat -t $timestep");
              
              open (OLCTEMP, "<olcao.skl") 
		|| die "cannot open olcao.skl for reading. \n";
              
              while ($line_OLCTEMP = <OLCTEMP>)
              {
                 my %hash;
                 @values = StructureControl::prepLine("",$line_OLCTEMP,'\s+');
                
                 # Look for atom names and count them.
                 if (lc($values[0]) =~ "frac")
                 {
                    $numAtoms = $values[1];
                    foreach $atom (1..$numAtoms)
                    {
                       @values = StructureControl::prepLine(\*OLCTEMP,"",'\s+');
                       $elements_keys = $values[0];
                       if (exists($hash{$elements_keys}))
                       {
                          $hash{$elements_keys}+=1;
                          
                 print " number of c in dump is $hash{c}\n";
                       }
                       else
                       {
                          $hash{$elements_keys} = 1;
                       }

                    }
                 # Calculating the density at each timestep
                 $actual_density = (($hash{c}*12.011)+($hash{h}*1.0079))/$actual_cell_vol;
                 print "actual density is $actual_density\n";
                 $density_diff= abs ($actual_density-$wanted_density);
                 print "density diffrence is $density_diff\n";
                 $DensityAndTimesteps{$density_diff}=$timestep;
                 }
                 undef (%hash); 
               }       
              close (OLCTEMP);
              
           }
		
        }
        foreach $vol (keys %DensityAndTimesteps)
        {  
           push (@DensityDiff, $vol);
           @SortedDensityDiff = sort {$a <=> $b} @DensityDiff;
        }
        print "sorted lengths are @SortedDensityDiff\n";
        print "smallest difference is $SortedDensityDiff[0]\n";
       
        $chosen_timestep = $DensityAndTimesteps{$SortedDensityDiff[0]};
        print "chosen timestep is $chosen_timestep\n";          
        close (DMP);

        system("dump2skl -d dump.coarse -a lammps.dat -t $chosen_timestep");

        #open the olcao skleton file for reading
        open (OLC, "<$inputFile_olcao")
              || die "cannot open $inputFile_olcao for reading. \n";

        #read the input file (olcoa.skl)
        while ($line = <OLC>)
        {
           @values = StructureControl::prepLine("",$line,'\s+');
           # Look for atom names
           if (lc($values[0]) =~ "frac")
           {
              $numAtoms = $values[1];
              foreach $atom (1..$numAtoms)
              {
                 @values = StructureControl::prepLine(\*OLC,"",'\s+');
                 $elements_keys = $values[0];
                 if (exists($arr_sim[$sim]{$elements_keys}))
                 {
                    $arr_sim[$sim]{$elements_keys}+=1;
                 }
                 else
                 {
                    $arr_sim[$sim]{$elements_keys} = 1;
                 }
              }
           }
         }


         # Calculate the elements percentage in each model
         foreach $elements_keys (keys $arr_sim[$sim])
         {
            if (lc($elements_keys) eq lc($target_element))
            {  
               print "Number of $elements_keys in model $sim is $arr_sim[$sim]{$elements_keys}\n";
               $percentage = ($arr_sim[$sim]{$elements_keys}/$numAtoms)*100;
               open (EVO,">>hEvolve") || die "Cannot open hEveolve for writing. \n";
               print EVO "$x $target_element_percentage $percentage $probability\n";
               close (EVO);
               print "the percentage of $elements_keys in model $sim is $percentage\n";
               $h_diff = abs ($percentage - $target_element_percentage);
               $hydrogen_arr[$sim-1]=$h_diff;
               #Note to self: Remember to add a success criteria, don't keep killing half of them if you can keep them.
               print "Array of Hydrogen is @hydrogen_arr\n";
                         
            }
          }
          chdir ("../..");
    }
    while (scalar(@arr_sim) > 0)
    {
       shift @arr_sim;
    }
    @sorted_hydrogen_arr = sort {$hydrogen_arr[$a] <=> $hydrogen_arr[$b]} 0..$#hydrogen_arr;
    foreach $i (0..$#sorted_hydrogen_arr)
    {
          $sorted_hydrogen_arr[$i] = $sorted_hydrogen_arr[$i]+1

    }
 
    $number_ofmodels_tokill= $numSimulations*$killing_rate/100;
    $number_ofmodels_tokill= int ($number_ofmodels_tokill);
    $first = $numSimulations - $number_ofmodels_tokill;
    @models_to_kill= @sorted_hydrogen_arr[$first..$#sorted_hydrogen_arr];
    print "Models to kill are  @models_to_kill\n"; 
    #$unsuccessful = 
    #while (scalar(@models_to_kill) > 0)
    #{
    foreach $sim (@models_to_kill)
    {
       chdir ("$sim");
       open (INP,"<condense.in") || die "Cannot open condense.in for reading.\n";
       @content_of_condense = <INP>;
       close (INP);
       print "content equal @content_of_condense\n";
       print "content 7 equal $content_of_condense[6]\n";
       if ($probability > 0 && $probability <= 0.9)
       {
          if ($target_element_percentage - $percentage > 0)
          {
             $probability = $probability - 0.05;
             if ($probability < 0)
             {
                $probability = 0;
             }
          
           }
           else 
           {
              $probability = $probability + 0.05;
           }
       }
       foreach $i (0..$#content_of_condense)
       {
          if ($content_of_condense[$i]=~"ch4_1 c-1 ch4_1 c-1")
          {
             $content_of_condense[$i]="ch4_1 c-1 ch4_1 c-1 $probability";
          }
       } 
       open (INP,">condense.in") || die "Cannot open condense.in for writing. \n";
       print INP "@content_of_condense";
       close (INP);
       chdir ("..");
   }

  #}
#}
   print "Sorted array is @sorted_hydrogen_arr\n";

   $x++;
 }
 print "$target_element_percentage\n";

}
#}
sub evolveEnsemble
{
}

 #testing the pull request
sub processResults
{
}

