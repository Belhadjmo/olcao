#!/usr/bin/env perl
sub printHelp
{
   print <<ENDHELP;
#PURPOSE:  To write a data file that is usable by origin to plot a symmetric
#         band diagram using the Origin band script.
#AUTHOR:  Paul Rulis
#LAST MODIFIED:  Dec. 11, 2019
#
#USAGE:  makeSYBD [-dat \$datFile] [-out \$outFile] [-raw \$rawFile]
#                 [-plot \$plotFile] [-basis \$basis] [-edge \$edge] | [-help]
#
#If no file parameters are given then it is assumed that the files to be used
#   are "gs_sybd-fb.dat", "gs_sybd-fb.out", and "gs_sybd-fb.raw".  The default
#   basis value is "fb", and the default edge is "gs".
ENDHELP
   exit;
}

use List::Util qw/sum/;

#First we parse the command line.

$number=0;
$commandLine = "command";
$basis="-fb";
$edge="gs";
$datFile="";
$outFile="";
$rawFile="";
$plotFile="";
while ($ARGV[$number] ne "")
{
   if ($ARGV[$number] eq "-help")
      {&printHelp;}
   elsif ($ARGV[$number] eq "-dat")
      {$datFile = $ARGV[++$number];}
   elsif ($ARGV[$number] eq "-out")
      {$outFile = $ARGV[++$number];}
   elsif ($ARGV[$number] eq "-raw")
      {$rawFile = $ARGV[++$number];}
   elsif ($ARGV[$number] eq "-plot")
      {$plotFile = $ARGV[++$number];}
   elsif ($ARGV[$number] eq "-basis")
      {$basis="-"."$ARGV[++$number]";}
   elsif ($ARGV[$number] eq "-edge")
      {$edge="$ARGV[++$number]";}
   else
   {
      print STDOUT "UNKNOWN COMMAND LINE PARAMETER $ARGV[$number]. ABORTING.\n";
      exit;
   }
   $number++;
}

#Record the command line used to create this set of input files.
open (COMMANDLINE,">>$commandLine");
print COMMANDLINE "makeSYBD ";
for ($i = 0; $i <= $#ARGV; $i++)
   {print COMMANDLINE "$ARGV[$i] ";}
print COMMANDLINE "\n";
close (COMMANDLINE);

$dat = ".dat";
$raw = ".raw";
$out = ".out";
$plot= ".plot";
$setup = "setup";
$sybdName = "_sybd";

if ($datFile eq "")
   {$datFile = "$setup$basis$dat";}
if ($outFile eq "")
   {$outFile = "$edge$sybdName$basis$out";}
if ($rawFile eq "")
   {$rawFile = "$edge$sybdName$basis$raw";}
if ($plotFile eq "")
   {$plotFile = "$edge$sybdName$basis$plot";}

#Now we determine the number of special K points to use.  This is done by
#   looking in the $sybd_dat file and pushing each line with a special K
#   point into an array.  The length of the array is the number of special
#   k points.
#During this procedure we will also get the names for the special K points.
#Open or die.
open (SYBDDATA, "< $datFile") || die "No such file.\n";

#Read to the SYBD_INPUT_DATA.
@KNames=();
while ($line = <SYBDDATA>)
{
   if ($line =~ /SYBD_INPUT_DATA/)
      {last;}
}

# Extract the number of high symmetry kpoints from the next two lines.
$line = <SYBDDATA>;
$line = <SYBDDATA>;
@tempArray = split (/\s+/,$line);
$numHighSymKP = sum(@tempArray);

foreach my $KP (1..$numHighSymKP)
{
   $line = <SYBDDATA>;
   if ($line =~ /GAMMA/)
      {push (@KNames, ("G"));}
   if ($line !~ /GAMMA/)
   {
      chomp ($line);
      @tempArray = split (/\s+/,$line);
      push (@KNames, ($tempArray[$#tempArray]));
   }
}
close (SYBDDATA);

open (SYBDOUT, "< $outFile") || die "Cannot open $outFile for reading.\n";
open (SYBDFINAL, "> $plotFile") || die "Cannot open $plotFile for writing.\n";

#Start with an empty array of values for the special K point positions.
#Then we fill it with the number corresponding to the special k points.
#Then we find the position values associated with the number and store them.
@KValues=();
while ($line = <SYBDOUT>)
{
   #This if block will collect the special k point numbers
   if ($line =~ /HIGH SYMMETRY K POINT/)
   {
      chomp $line;
      @tempArray = split (/\s+/,$line);
      push (@KValues, ($tempArray[$#tempArray]));

      # We've already discovered all the high symmetry kpoint names from the
      #   olcao.dat input file. Now we check if we have discovered an equal
      #   number of index numbers from the first part of the kpoint
      #   description in the olcao output from the SYBD calculation. Once we
      #   have discovered all the associated index values, the we quit.
      if ($#KValues == $#KNames)
         {last;}
   }
}

# Now, we read the positions of the special high symmetry kpoints using the
#   numbers found in the above block. (We are continuing to read from the
#   SYBD output file.)
$current=0; # Index for which high symmetry kpoint index we are looking at.
while ($line = <SYBDOUT>)
{
   chomp $line;
   @tempArray = split (/\s+/,$line);
   # If we found the number, then assign the value over top of it.
   if ($tempArray[1] == $KValues[$current])
   {
      $KValues[$current] = $tempArray[2];
      $current++;
      if ($current == $#KValues+1)
         {last;}
   }
}
close(SYBDOUT);

# Go through the list and find any cases with two consecutive equal values.
#   That implies that we have found a change from one path to another. In that
#   case we will change the name by making it a comma separated pair of the
#   two names. As we do this, the length of the KValues and KNames arrays will
#   shrink. Therefore, the loop might go beyond the end of the array and so we
#   must check for that situation and exit the loop if we do.
foreach my $kp (1..$numHighSymKP-1) # Start with the second array index.
{
   # If we went beyond the end of the array then leave the loop.
   if ($kp > $#KValues)
      {last;}

   # If the current and previous values are equal then 
   if ($KValues[$kp] == $KValues[$kp-1])
   {
      splice (@KValues,$kp,1); # Remove one of the identical values.

      # Remove both names, but replace the first with a "A,B" form of name.
      splice (@KNames,$kp-1,2,("$KNames[$kp-1],$KNames[$kp]"));
   }
}

open(SYBDRAW,"< $rawFile");
$line = <SYBDRAW>;
@tempArray = split (/ +/,$line);
$NumKPoints=$tempArray[1];
$NumStates=$tempArray[2];
if (int($NumStates/11) < $NumStates/11)
   {$NumStates=(int($NumStates/11)+1)*11;}

$current = 0;
for ($i=0;$i<$NumKPoints;$i++)
{
   $line = <SYBDRAW>;
   chomp $line;
   print SYBDFINAL "$line";
   for ($j=1;$j<=$NumStates/11;$j++)
   {
      $line = <SYBDRAW>;
      chomp ($line);
      print SYBDFINAL "$line";
   }
   if ($current <= $#KValues)
   {
      print SYBDFINAL " $KValues[$current] $KNames[$current]";
      $current++;
   }
   print SYBDFINAL "\n";
}
